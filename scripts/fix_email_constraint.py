#!/usr/bin/env python3
"""
Script para diagnosticar y solucionar el problema de UNIQUE constraint en users.email
"""

import os
import sys

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from app.models import db, User
from config.settings import config


def diagnose_email_constraint_issue():
    """Diagnosticar el problema de constraint UNIQUE en email"""
    
    print("üîç DIAGN√ìSTICO: Problema UNIQUE constraint en users.email")
    print("=" * 60)
    
    # Crear aplicaci√≥n
    config_name = os.environ.get('FLASK_CONFIG') or 'development'
    app = create_app(config[config_name])
    
    with app.app_context():
        print("\n1. üìä Informaci√≥n general de usuarios:")
        users = User.query.all()
        print(f"   Total usuarios: {len(users)}")
        
        print("\n2. üìß An√°lisis de emails:")
        email_counts = {}
        users_with_empty_email = []
        
        for user in users:
            email = user.email or ''  # Tratar None como string vac√≠o
            if email in email_counts:
                email_counts[email] += 1
            else:
                email_counts[email] = 1
            
            if not email:  # Email vac√≠o o None
                users_with_empty_email.append(user)
        
        # Mostrar emails duplicados
        print("   Emails y sus ocurrencias:")
        for email, count in email_counts.items():
            status = "‚ùå DUPLICADO" if count > 1 else "‚úÖ OK"
            email_display = f"'{email}'" if email else "'[VAC√çO]'"
            print(f"   - {email_display}: {count} usuario(s) {status}")
        
        print(f"\n3. üë• Usuarios con email vac√≠o ({len(users_with_empty_email)}):")
        for user in users_with_empty_email:
            print(f"   - ID: {user.id}, Usuario: {user.username}, Email: '{user.email}'")
        
        print(f"\n4. üìã Detalles de todos los usuarios:")
        for user in users:
            print(f"   ID: {user.id:2d} | Usuario: {user.username:15s} | Email: '{user.email or '[None]':20s}' | Activo: {user.is_active}")
        
        return users_with_empty_email, email_counts


def fix_email_constraint_issue():
    """Solucionar el problema de constraint UNIQUE en email"""
    
    print("\n" + "=" * 60)
    print("üîß SOLUCI√ìN: Reparar constraint UNIQUE en users.email")
    print("=" * 60)
    
    config_name = os.environ.get('FLASK_CONFIG') or 'development'
    app = create_app(config[config_name])
    
    with app.app_context():
        try:
            print("\n1. üîç Identificando usuarios problem√°ticos...")
            users_with_empty_email = User.query.filter(
                (User.email == '') | (User.email.is_(None))
            ).all()
            
            print(f"   Encontrados {len(users_with_empty_email)} usuarios con email vac√≠o/None")
            
            if len(users_with_empty_email) <= 1:
                print("   ‚úÖ No hay problema de duplicados")
                return
            
            print("\n2. üîß Asignando emails √∫nicos...")
            for i, user in enumerate(users_with_empty_email):
                if i == 0:
                    # El primer usuario puede mantener email vac√≠o si es necesario
                    new_email = None
                    print(f"   - Usuario {user.username} (ID: {user.id}): Mantener email None")
                else:
                    # Asignar emails √∫nicos a los dem√°s
                    new_email = f"user{user.id}@floristeria.local"
                    print(f"   - Usuario {user.username} (ID: {user.id}): Asignar email '{new_email}'")
                
                user.email = new_email
            
            print("\n3. üíæ Guardando cambios...")
            db.session.commit()
            print("   ‚úÖ Cambios guardados exitosamente")
            
            print("\n4. ‚úÖ Verificaci√≥n final:")
            # Verificar que no hay duplicados
            from sqlalchemy import func
            duplicates = db.session.query(User.email, func.count(User.id)).group_by(User.email).having(func.count(User.id) > 1).all()
            
            if duplicates:
                print("   ‚ùå A√∫n hay emails duplicados:")
                for email, count in duplicates:
                    print(f"      - '{email}': {count} usuarios")
            else:
                print("   ‚úÖ No hay emails duplicados")
            
        except Exception as e:
            print(f"\n‚ùå Error durante la reparaci√≥n: {str(e)}")
            db.session.rollback()


def show_user_management_solution():
    """Mostrar soluci√≥n para el formulario de gesti√≥n de usuarios"""
    
    print("\n" + "=" * 60)
    print("üí° SOLUCI√ìN PARA FORMULARIO DE GESTI√ìN")
    print("=" * 60)
    
    print("""
üîß Para evitar este error en el futuro:

1. VALIDACI√ìN EN EL FORMULARIO:
   - Verificar que el email no est√© vac√≠o antes de enviar
   - Generar email √∫nico autom√°ticamente si est√° vac√≠o
   - Validar formato de email

2. L√ìGICA RECOMENDADA:
   ```python
   # En lugar de enviar email vac√≠o, generar uno √∫nico
   if not email or email.strip() == '':
       email = f"user{user_id}@floristeria.local"
   ```

3. VALIDACI√ìN EN EL BACKEND:
   - Verificar unicidad antes de UPDATE
   - Manejar casos de email vac√≠o/None
   - Transacciones con rollback

4. INTERFAZ DE USUARIO:
   - Campo email requerido en formularios
   - Validaci√≥n JavaScript antes de env√≠o
   - Mensajes de error claros
""")


if __name__ == '__main__':
    print("Iniciando diagn√≥stico del problema UNIQUE constraint...")
    print(f"Timestamp: {datetime.now() if 'datetime' in globals() else 'N/A'}")
    
    try:
        from datetime import datetime
        
        # Diagn√≥stico
        users_with_empty_email, email_counts = diagnose_email_constraint_issue()
        
        # Verificar si necesita reparaci√≥n
        duplicates = [email for email, count in email_counts.items() if count > 1]
        
        if duplicates:
            print(f"\n‚ö†Ô∏è PROBLEMA DETECTADO: {len(duplicates)} email(s) duplicado(s)")
            response = input("\n¬øQuieres reparar autom√°ticamente? (s/n): ")
            
            if response.lower() in ['s', 'si', 's√≠', 'y', 'yes']:
                fix_email_constraint_issue()
            else:
                print("‚ÑπÔ∏è Reparaci√≥n omitida por el usuario")
        else:
            print("\n‚úÖ No se detectaron problemas de emails duplicados")
        
        # Mostrar soluci√≥n para el futuro
        show_user_management_solution()
        
        print(f"\n" + "=" * 60)
        print("‚úÖ DIAGN√ìSTICO COMPLETADO")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Error durante el diagn√≥stico: {str(e)}")
        print(f"Verifica que el servidor est√© corriendo y la BD accesible.")
