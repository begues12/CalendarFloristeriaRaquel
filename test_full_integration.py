"""
Script de prueba completa de la integraci√≥n WooCommerce-Calendar
Verifica que los pedidos se muestren correctamente en el calendario
"""

import os
import sys
import json
import requests
from datetime import datetime, date, timedelta

def test_full_integration():
    """Prueba la integraci√≥n completa desde API hasta Calendar"""
    
    print("üß™ PRUEBA COMPLETA DE INTEGRACI√ìN WOOCOMMERCE-CALENDAR")
    print("=" * 65)
    
    base_url = "http://localhost:5000"
    
    # 1. Probar webhook
    print("\n1Ô∏è‚É£ PROBANDO WEBHOOK DE WOOCOMMERCE...")
    
    webhook_data = {
        "id": 77777,
        "status": "processing",
        "total": "175.50",
        "currency": "EUR",
        "date_created": date.today().isoformat() + "T12:30:00",
        "billing": {
            "first_name": "Prueba",
            "last_name": "Integraci√≥n",
            "email": "prueba.integracion@test.com",
            "phone": "+34 666 123 456"
        },
        "line_items": [
            {"name": "Ramo de prueba integraci√≥n", "quantity": 1},
            {"name": "Complementos florales", "quantity": 3}
        ]
    }
    
    try:
        response = requests.post(
            f"{base_url}/webhook/woocommerce",
            json=webhook_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Webhook procesado: {result.get('message')}")
            print(f"üìÖ Fecha guardada: {result.get('date')}")
        else:
            print(f"‚ùå Error en webhook: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå No se pudo conectar al servidor. Ejecute: python app.py")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False
    
    # 2. Probar sincronizaci√≥n manual
    print("\n2Ô∏è‚É£ PROBANDO SINCRONIZACI√ìN MANUAL...")
    
    sync_data = {
        "start_date": (date.today() - timedelta(days=3)).strftime('%Y-%m-%d'),
        "end_date": date.today().strftime('%Y-%m-%d')
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/woocommerce/manual-sync",
            json=sync_data,
            headers={'Content-Type': 'application/json'},
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Sincronizaci√≥n manual exitosa!")
            details = result.get('details', {})
            print(f"   üìä Nuevos: {details.get('synced_orders', 0)}")
            print(f"   üìä Actualizados: {details.get('updated_orders', 0)}")
            print(f"   üìä Total: {details.get('total_processed', 0)}")
        else:
            print(f"‚ùå Error en sincronizaci√≥n: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en sincronizaci√≥n: {e}")
        return False
    
    # 3. Verificar notas en API
    print("\n3Ô∏è‚É£ VERIFICANDO NOTAS VIA API...")
    
    today_str = date.today().strftime('%Y-%m-%d')
    
    try:
        response = requests.get(f"{base_url}/api/notes/date/{today_str}", timeout=10)
        
        if response.status_code == 200:
            notes = response.json()
            print(f"‚úÖ API de notas funcional - {len(notes)} notas encontradas")
            
            woocommerce_notes = [note for note in notes if 'üõí Pedido #' in note.get('title', '')]
            print(f"üõí Notas de WooCommerce: {len(woocommerce_notes)}")
            
            for note in woocommerce_notes[:3]:  # Mostrar m√°ximo 3
                print(f"   ‚Ä¢ {note.get('title', 'Sin t√≠tulo')}")
                print(f"     Color: {note.get('color', 'Sin color')}")
                print(f"     Prioridad: {note.get('priority', 'Sin prioridad')}")
            
            if len(woocommerce_notes) > 3:
                print(f"   ... y {len(woocommerce_notes) - 3} m√°s")
                
        else:
            print(f"‚ùå Error en API de notas: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando notas: {e}")
        return False
    
    # 4. Verificar p√°gina del calendario
    print("\n4Ô∏è‚É£ VERIFICANDO P√ÅGINA DEL CALENDARIO...")
    
    try:
        response = requests.get(base_url, timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # Buscar indicadores de que hay contenido del calendario
            if 'notes_by_date' in html_content:
                print("‚úÖ Template del calendario cargado correctamente")
            else:
                print("‚ö†Ô∏è Template del calendario puede tener problemas")
            
            # Buscar indicadores de notas
            if 'fa-sticky-note' in html_content:
                print("‚úÖ Iconos de notas encontrados en template")
            else:
                print("‚ö†Ô∏è No se encontraron iconos de notas")
                
        else:
            print(f"‚ùå Error cargando calendario: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando calendario: {e}")
        return False
    
    # 5. Crear nota de prueba via API
    print("\n5Ô∏è‚É£ CREANDO NOTA DE PRUEBA VIA API...")
    
    test_note = {
        "date_for": date.today().strftime('%Y-%m-%d'),
        "title": "üß™ Nota de prueba integraci√≥n",
        "content": "Esta es una nota creada para verificar la integraci√≥n completa",
        "color": "#e91e63",
        "priority": "high",
        "is_private": False
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/notes",
            json=test_note,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 201:
            created_note = response.json()
            print(f"‚úÖ Nota creada via API: {created_note.get('title')}")
            note_id = created_note.get('id')
            
            # Eliminar la nota de prueba
            delete_response = requests.delete(f"{base_url}/api/notes/{note_id}", timeout=10)
            if delete_response.status_code == 200:
                print("üóëÔ∏è Nota de prueba eliminada")
            
        else:
            print(f"‚ùå Error creando nota: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error en API de notas: {e}")
    
    return True

def test_specific_date_notes():
    """Prueba notas para fechas espec√≠ficas"""
    print("\n6Ô∏è‚É£ PROBANDO NOTAS EN FECHAS ESPEC√çFICAS...")
    
    base_url = "http://localhost:5000"
    
    # Probar √∫ltimos 7 d√≠as
    for i in range(7):
        test_date = date.today() - timedelta(days=i)
        date_str = test_date.strftime('%Y-%m-%d')
        
        try:
            response = requests.get(f"{base_url}/api/notes/date/{date_str}", timeout=5)
            if response.status_code == 200:
                notes = response.json()
                wc_notes = [n for n in notes if 'üõí' in n.get('title', '')]
                if wc_notes:
                    print(f"   üìÖ {date_str}: {len(wc_notes)} pedidos WooCommerce")
                elif notes:
                    print(f"   üìÖ {date_str}: {len(notes)} notas (no WooCommerce)")
        except:
            pass  # Ignorar errores para esta prueba r√°pida

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE INTEGRACI√ìN COMPLETA")
    
    success = test_full_integration()
    
    if success:
        test_specific_date_notes()
        
        print("\n" + "=" * 65)
        print("üéâ PRUEBAS DE INTEGRACI√ìN COMPLETADAS")
        print("\n‚úÖ RESULTADOS:")
        print("   ‚Ä¢ Webhook de WooCommerce funcional")
        print("   ‚Ä¢ Sincronizaci√≥n manual operativa")
        print("   ‚Ä¢ API de notas del calendario activa")
        print("   ‚Ä¢ Template del calendario cargando")
        print("   ‚Ä¢ Creaci√≥n/eliminaci√≥n de notas via API exitosa")
        
        print("\nüèÅ PASOS FINALES:")
        print("1. Abra el navegador en: http://localhost:5000")
        print("2. Vaya al calendario principal")
        print("3. Verifique que los pedidos aparezcan como notas con colores")
        print("4. Configure WooCommerce real en: /woocommerce/config")
        
        print("\nüí° Si no ve los pedidos en el calendario:")
        print("   ‚Ä¢ Verifique que sea usuario admin")
        print("   ‚Ä¢ Refresque la p√°gina del calendario")
        print("   ‚Ä¢ Revise que las fechas coincidan")
        print("   ‚Ä¢ Ejecute: python diagnose_woocommerce.py")
        
    else:
        print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
        print("Revise los errores anteriores antes de continuar")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
