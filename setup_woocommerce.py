"""
Script para configurar autom√°ticamente la integraci√≥n WooCommerce
usando los datos del archivo api_all.json
"""

import json
import sys
import os

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from app import create_app
    from app.models.user import ApiIntegration, User
    from app.models import db
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    sys.exit(1)

def setup_woocommerce_integration():
    """Configurar integraci√≥n WooCommerce autom√°ticamente"""
    
    print("‚öôÔ∏è CONFIGURACI√ìN AUTOM√ÅTICA DE WOOCOMMERCE")
    print("=" * 50)
    
    app = create_app()
    
    with app.app_context():
        
        # Verificar si ya existe una integraci√≥n WooCommerce
        existing = ApiIntegration.query.filter_by(api_type='woocommerce').first()
        
        if existing:
            print(f"‚ÑπÔ∏è Ya existe integraci√≥n WooCommerce: {existing.name}")
            print(f"   URL: {existing.url}")
            print(f"   Activa: {'S√≠' if existing.is_active else 'No'}")
            
            response = input("\n¬øQuiere actualizarla? (s/n): ").lower().strip()
            if response != 's':
                print("‚ùå Configuraci√≥n cancelada")
                return False
            
            integration = existing
        else:
            print("üìù Creando nueva integraci√≥n WooCommerce...")
            integration = ApiIntegration()
        
        # Configurar los datos de la integraci√≥n
        integration.name = "WooCommerce Florister√≠a"
        integration.api_type = "woocommerce"
        integration.url = "https://floradomicilio.com/wp-json/wc/v3/orders"
        integration.request_method = "GET"
        integration.refresh_interval = 60
        integration.is_active = True
        
        # Headers para WooCommerce (se necesitar√°n las credenciales reales)
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "Floristeria-Calendar/1.0"
        }
        integration.headers = json.dumps(headers)
        
        # Configuraci√≥n de mapeo para WooCommerce
        mapping_config = {
            "data_path": "",  # Los datos vienen directamente como array
            "date_field": "date_created",
            "id_field": "id",
            "status_field": "status",
            "total_field": "total",
            "currency_field": "currency",
            "customer_field": "billing",
            "items_field": "line_items",
            "icon": "fas fa-shopping-cart",
            "color": "#007bff"
        }
        integration.mapping_config = json.dumps(mapping_config, indent=2)
        
        # Mensaje sobre credenciales
        print("\nüîë CONFIGURACI√ìN DE CREDENCIALES:")
        print("Para que funcione correctamente, necesita configurar:")
        print("1. Consumer Key de WooCommerce")
        print("2. Consumer Secret de WooCommerce")
        print("\nEstas credenciales se obtienen en:")
        print("WooCommerce ‚Üí Configuraci√≥n ‚Üí Avanzado ‚Üí REST API ‚Üí Agregar clave")
        
        # Opci√≥n de configurar credenciales ahora
        setup_creds = input("\n¬øQuiere configurar las credenciales ahora? (s/n): ").lower().strip()
        
        if setup_creds == 's':
            consumer_key = input("Consumer Key: ").strip()
            consumer_secret = input("Consumer Secret: ").strip()
            
            if consumer_key and consumer_secret:
                integration.api_key = consumer_key
                integration.request_body = consumer_secret  # Usamos este campo para el secret
                print("‚úÖ Credenciales configuradas")
            else:
                print("‚ö†Ô∏è Credenciales no configuradas - se usar√° modo de prueba")
        
        # Guardar en base de datos
        if not existing:
            db.session.add(integration)
        
        try:
            db.session.commit()
            print(f"\n‚úÖ Integraci√≥n WooCommerce configurada exitosamente")
            print(f"   ID: {integration.id}")
            print(f"   Nombre: {integration.name}")
            print(f"   URL: {integration.url}")
            print(f"   Estado: {'Activa' if integration.is_active else 'Inactiva'}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error guardando configuraci√≥n: {e}")
            db.session.rollback()
            return False

def test_configuration():
    """Probar la configuraci√≥n creada"""
    
    print(f"\nüß™ PROBANDO CONFIGURACI√ìN...")
    
    app = create_app()
    
    with app.app_context():
        integration = ApiIntegration.query.filter_by(api_type='woocommerce').first()
        
        if not integration:
            print("‚ùå No se encontr√≥ integraci√≥n WooCommerce")
            return False
        
        print(f"‚úÖ Integraci√≥n encontrada: {integration.name}")
        
        # Simular una prueba b√°sica
        if integration.api_key and integration.request_body:
            print("‚úÖ Credenciales configuradas")
        else:
            print("‚ö†Ô∏è Credenciales no configuradas - funcionar√° en modo de prueba")
        
        print(f"‚úÖ URL configurada: {integration.url}")
        print(f"‚úÖ Configuraci√≥n de mapeo: OK")
        
        return True

def main():
    """Funci√≥n principal"""
    
    print("üöÄ CONFIGURADOR AUTOM√ÅTICO DE WOOCOMMERCE")
    print("Este script configura autom√°ticamente la integraci√≥n")
    print("para sincronizar pedidos de WooCommerce con el calendario\n")
    
    success = setup_woocommerce_integration()
    
    if success:
        test_configuration()
        
        print(f"\nüéâ ¬°CONFIGURACI√ìN COMPLETADA!")
        print(f"\nüìã PR√ìXIMOS PASOS:")
        print(f"1. Ejecute la aplicaci√≥n: python app.py")
        print(f"2. Vaya a: http://localhost:5000/woocommerce/config")
        print(f"3. Pruebe la sincronizaci√≥n manual")
        print(f"4. Configure el webhook en WooCommerce:")
        print(f"   URL: http://localhost:5000/webhook/woocommerce")
        print(f"   Eventos: order.created, order.updated, order.status_changed")
        
        if not input("\n¬øConfigur√≥ las credenciales? (s/n): ").lower().strip() == 's':
            print(f"\n‚ö†Ô∏è IMPORTANTE:")
            print(f"Sin credenciales reales de WooCommerce, el sistema")
            print(f"funcionar√° en modo de prueba con datos simulados.")
            print(f"Para conectar con WooCommerce real, configure las")
            print(f"credenciales en la interfaz web.")
    
    else:
        print(f"\n‚ùå CONFIGURACI√ìN FALL√ì")
        print(f"Revise los errores anteriores")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
